{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoEdit.js","components/TodoList.js","filters.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","onCreateTodo","title","setTitle","onSubmit","type","className","placeholder","value","onChange","event","target","TodoItem","todo","onComplete","onActiveEditTodo","onDelete","checked","completed","id","onDoubleClick","onClick","TodoEdit","todos","saveData","setTodos","useState","titleBeforeEdit","setTitleBeforeEdit","inputRef","useRef","useEffect","current","focus","ref","todoId","newTodos","map","elem","onEdit","onBlur","toggle","onClickOutSide","onKeyDown","key","filter","el","handleUpdatedDone","TodoList","todosVisible","setToogleAll","every","filters","all","active","TodosFilter","onVisibleTodos","visibleTodos","Object","values","href","toLocaleLowerCase","App","toogleAll","setVisibleTodos","count","reduce","accum","length","localStorage","setItem","JSON","stringify","getItem","parse","preventDefault","Date","onToogleAll","htmlFor","str","some","onClearCompleted","ReactDOM","render","document","getElementById"],"mappings":"wQAyBeA,EAtBC,SAAC,GAAD,IACdC,EADc,EACdA,aACAC,EAFc,EAEdA,MACAC,EAHc,EAGdA,SAHc,OAKd,sBAAMC,SAAUH,EAAhB,SACE,uBACEI,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZC,MAAON,EACPO,SAAU,SAAAC,GAAK,OAAIP,EAASO,EAAMC,OAAOH,aC0BhCI,EArCE,SAAC,GAAD,IACfC,EADe,EACfA,KACAC,EAFe,EAEfA,WACAC,EAHe,EAGfA,iBACAC,EAJe,EAIfA,SAJe,OAMf,sBAAKV,UAAU,OAAf,UACE,uBACED,KAAK,WACLC,UAAU,SACVW,QAASJ,EAAKK,UACdT,SAAU,kBAAMK,EAAWD,EAAKM,OAElC,uBACEC,cAAe,kBAAML,EAAiBF,EAAKM,KAD7C,SAGGN,EAAKX,QAER,wBACEG,KAAK,SACLC,UAAU,UACVe,QAAS,kBAAML,EAASH,EAAKM,WC0FpBG,EA/GE,SAAC,GAKX,IAJLC,EAII,EAJJA,MACAV,EAGI,EAHJA,KACAW,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAAWC,mBAEjBC,qBAAU,WACRH,EAAmBf,EAAKX,OACxB2B,EAASG,QAAQC,UAChB,CAACpB,EAAKM,KAmET,OACE,uBACEe,IAAKL,EACLxB,KAAK,OACLC,UAAU,OACVE,MAAOK,EAAKX,MACZO,SAAU,SAACC,IArBA,SAACA,EAAOyB,GACrB,IAAMC,EAAWb,EAAMc,KAAI,SAACC,GAC1B,OAAIA,EAAKnB,KAAOgB,EACP,2BACFG,GADL,IAEEpC,MAAOQ,EAAMC,OAAOH,QAIjB8B,KAGTb,EAASW,GAULG,CAAO7B,EAAOG,EAAKM,KAErBqB,OAAQ,kBAzCW,SAACL,GACtB,IAAMC,EAAWb,EAAMc,KAAI,SAACC,GAC1B,OAAIA,EAAKnB,KAAOgB,EACP,2BACFG,GADL,IAEEpC,MAAOyB,EACPc,QAAQ,IAILH,KAGTb,EAASW,GACTZ,EAASY,GA2BOM,CAAe7B,EAAKM,KAClCwB,UAAW,SAAAjC,GAAK,OA3EM,SAACA,EAAOyB,GAChC,GAAkB,UAAdzB,EAAMkC,IAAiB,CACzB,IAAMR,EAAWb,EAAMc,KAAI,SAACC,GAC1B,OAAIA,EAAKnB,KAAOgB,EACP,2BACFG,GADL,IAEEG,QAAQ,IAILH,KAGTb,EAASW,EAASS,QAAO,SAAAC,GAAE,MAAiB,KAAbA,EAAG5C,UAClCsB,EAASY,EAASS,QAAO,SAAAC,GAAE,MAAiB,KAAbA,EAAG5C,eAC7B,GAAkB,WAAdQ,EAAMkC,IAAkB,CACjC,IAAMR,EAAWb,EAAMc,KAAI,SAACC,GAC1B,OAAIA,EAAKnB,KAAOgB,EACP,2BACFG,GADL,IAEEpC,MAAOyB,EACPc,QAAQ,IAILH,KAGTb,EAASW,GACTZ,EAASY,IA+CPW,CAAkBrC,EAAOG,EAAKM,QCQvB6B,EAhGE,SAAC,GAMX,IALLC,EAKI,EALJA,aACA1B,EAII,EAJJA,MACAE,EAGI,EAHJA,SACAD,EAEI,EAFJA,SACA0B,EACI,EADJA,aAEMlC,EAAW,SAACmB,GAChB,IAAMC,EAAWb,EAAMsB,QAAO,SAAAhC,GAAI,OAAIA,EAAKM,KAAOgB,KAE9CC,EAASe,OAAM,SAAAtC,GAAI,OAAKA,EAAKK,cAC/BgC,GAAa,GAGfzB,EAASW,GACTZ,EAASY,IAGLtB,EAAa,SAACqB,GAClB,IAAMC,EAAWb,EAAMc,KAAI,SAACxB,GAC1B,OAAIA,EAAKM,KAAOgB,EACP,2BACFtB,GADL,IAEEK,WAAYL,EAAKK,YAIdL,KAGTY,EAASW,GACTZ,EAASY,IAGLrB,EAAmB,SAACoB,GACxB,IAAMC,EAAWb,EAAMc,KAAI,SAACxB,GAC1B,OAAIA,EAAKM,KAAOgB,EACP,2BACFtB,GADL,IAEE4B,QAAQ,IAIL5B,KAGTY,EAASW,IAGX,OACE,oBAAI9B,UAAU,YAAd,SACG2C,EAAaZ,KAAI,SAAAxB,GAAI,OACpBA,EAAK4B,OAED,oBACEnC,UAAWO,EAAKK,UAAY,YAAc,KAD5C,SAIE,cAAC,EAAD,CACEL,KAAMA,EACNC,WAAYA,EACZC,iBAAkBA,EAClBC,SAAUA,KANPH,EAAKM,IAUZ,oBAAIb,UAAU,UAAd,SACE,cAAC,EAAD,CACEiB,MAAOA,EACPV,KAAMA,EACNW,SAAUA,EACVC,SAAUA,KALeZ,EAAKM,UCvEjCiC,EAAU,CACrBC,IAAK,MACLC,OAAQ,SACRpC,UAAW,aC2BEqC,EA1BK,SAAC,GAAD,IAClBC,EADkB,EAClBA,eACAC,EAFkB,EAElBA,aAFkB,OAIlB,oBAAInD,UAAU,UAAd,SACGoD,OAAOC,OAAOP,GAASf,KAAI,SAAAQ,GAAM,OAChC,6BACE,mBACEe,KAAiB,QAAXf,EAAmB,KAAnB,YAA+BA,EAAOgB,qBAC5CvD,UAAWmD,IAAiBZ,EAAS,WAAa,KAClDxB,QAAS,WACPmC,EAAeX,IAJnB,SAOGA,KARIA,SCyIAiB,MA7If,WACE,MAA0BpC,mBAAS,IAAnC,mBAAOH,EAAP,KAAcE,EAAd,KACA,EAA0BC,mBAAS,IAAnC,mBAAOxB,EAAP,KAAcC,EAAd,KACA,EAAkCuB,oBAAS,GAA3C,mBAAOqC,EAAP,KAAkBb,EAAlB,KACA,EAAwCxB,mBAAS0B,EAAQC,KAAzD,mBAAOI,EAAP,KAAqBO,EAArB,KAEMC,EAAQ1C,EAAM2C,QAClB,SAACC,EAAOtD,GAAR,OAAiBsD,GAAStD,EAAKK,UAAY,EAAI,KAAIK,EAAM6C,QAGrD5C,EAAW,SAAAY,GAAQ,OACvBiC,aAAaC,QAAQ,QAASC,KAAKC,UAAUpC,KAG/CL,qBAAU,WACJsC,aAAaI,QAAQ,UACvBhD,EAAS8C,KAAKG,MAAML,aAAaI,QAAQ,aAE1C,IAEH,IA8CIxB,EAAe,GAcnB,OAZIQ,IAAiBL,EAAQC,IAC3BJ,EAAe1B,EACNkC,IAAiBL,EAAQE,OAClCL,EAAe1B,EAAMsB,QAAO,SAAAhC,GAAI,OAAKA,EAAKK,aACjCuC,IAAiBL,EAAQlC,YAClC+B,EAAe1B,EAAMsB,QAAO,SAAAhC,GAAI,OAAIA,EAAKK,cAQzC,0BAASZ,UAAU,UAAnB,UACE,yBAAQA,UAAU,SAAlB,UACE,uCAEA,cAAC,EAAD,CACEL,aAlEW,SAACS,GAClBA,EAAMiE,iBACN,IAAMxD,GAAM,IAAIyD,KAIhB,GAAK1E,EAAL,CAIA,IAAMkC,EAAQ,CAAI,CAChBjB,KAAIjB,QAAOgB,WARK,EAQMuB,QAPT,IAMD,mBAERlB,IAENE,EAASW,GACTjC,EAAS,IACTqB,EAASY,KAmDHlC,MAAOA,EACPC,SAAUA,OAId,0BAASG,UAAU,OAAnB,UACE,uBACED,KAAK,WACLc,GAAG,aACHb,UAAU,aACVW,QAAS8C,EACTtD,SAAU,kBA3DE,WAClB,GAAKc,EAAM6C,OAAX,CAMA,IAAMhC,EAAWb,EAAMc,KAAI,SAAAxB,GAAI,kCAC1BA,GAD0B,IAE7BK,WAAY6C,OAGdtC,EAASW,GACTc,GAAca,QAXZb,GAAa,GAyDO2B,MAGlB,uBAAOC,QAAQ,aAAf,kCAEA,cAAC,EAAD,CACE7B,aAAcA,EACdxB,SAAUA,EACVF,MAAOA,EACPC,SAAUA,EACV0B,aAAcA,OAIjB3B,EAAM6C,OACL,yBAAQ9D,UAAU,SAAlB,UACE,sBAAMA,UAAU,aAAhB,mBACM2D,EADN,iBAIA,cAAC,EAAD,CACET,eA3Ca,SAACuB,GACtBf,EAAgBe,IA2CRtB,aAAcA,IAGfR,EAAa+B,MAAK,SAAAnE,GAAI,OAAIA,EAAKK,aAE5B,wBACEb,KAAK,SACLC,UAAU,kBACVe,QAAS,kBAzEE,WACvB,IAAMe,EAAWb,EAAMsB,QAAO,SAAAhC,GAAI,OAAKA,EAAKK,aAEvCkB,EAASgC,QACZlB,GAAa,GAGfzB,EAASW,GACTZ,EAASY,GAiEkB6C,IAHjB,6BAOE,QAGN,SCpIVC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.439c0140.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoApp = ({\n  onCreateTodo,\n  title,\n  setTitle,\n}) => (\n  <form onSubmit={onCreateTodo}>\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={title}\n      onChange={event => setTitle(event.target.value)}\n    />\n  </form>\n);\n\nTodoApp.propTypes = {\n  onCreateTodo: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  setTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  todo,\n  onComplete,\n  onActiveEditTodo,\n  onDelete,\n}) => (\n  <div className=\"view\">\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      checked={todo.completed}\n      onChange={() => onComplete(todo.id)}\n    />\n    <label\n      onDoubleClick={() => onActiveEditTodo(todo.id)}\n    >\n      {todo.title}\n    </label>\n    <button\n      type=\"button\"\n      className=\"destroy\"\n      onClick={() => onDelete(todo.id)}\n    />\n  </div>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onActiveEditTodo: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoEdit = ({\n  todos,\n  todo,\n  saveData,\n  setTodos,\n}) => {\n  const [titleBeforeEdit, setTitleBeforeEdit] = useState('');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    setTitleBeforeEdit(todo.title);\n    inputRef.current.focus();\n  }, [todo.id]);\n\n  const handleUpdatedDone = (event, todoId) => {\n    if (event.key === 'Enter') {\n      const newTodos = todos.map((elem) => {\n        if (elem.id === todoId) {\n          return {\n            ...elem,\n            toggle: true,\n          };\n        }\n\n        return elem;\n      });\n\n      setTodos(newTodos.filter(el => el.title !== ''));\n      saveData(newTodos.filter(el => el.title !== ''));\n    } else if (event.key === 'Escape') {\n      const newTodos = todos.map((elem) => {\n        if (elem.id === todoId) {\n          return {\n            ...elem,\n            title: titleBeforeEdit,\n            toggle: true,\n          };\n        }\n\n        return elem;\n      });\n\n      setTodos(newTodos);\n      saveData(newTodos);\n    }\n  };\n\n  const onClickOutSide = (todoId) => {\n    const newTodos = todos.map((elem) => {\n      if (elem.id === todoId) {\n        return {\n          ...elem,\n          title: titleBeforeEdit,\n          toggle: true,\n        };\n      }\n\n      return elem;\n    });\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const onEdit = (event, todoId) => {\n    const newTodos = todos.map((elem) => {\n      if (elem.id === todoId) {\n        return {\n          ...elem,\n          title: event.target.value,\n        };\n      }\n\n      return elem;\n    });\n\n    setTodos(newTodos);\n  };\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"text\"\n      className=\"edit\"\n      value={todo.title}\n      onChange={(event) => {\n        onEdit(event, todo.id);\n      }}\n      onBlur={() => onClickOutSide(todo.id)}\n      onKeyDown={event => (\n        handleUpdatedDone(event, todo.id)\n      )}\n    />\n  );\n};\n\nTodoEdit.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  saveData: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default TodoEdit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport TodoEdit from './TodoEdit';\n\nconst TodoList = ({\n  todosVisible,\n  todos,\n  setTodos,\n  saveData,\n  setToogleAll,\n}) => {\n  const onDelete = (todoId) => {\n    const newTodos = todos.filter(todo => todo.id !== todoId);\n\n    if (newTodos.every(todo => !todo.completed)) {\n      setToogleAll(false);\n    }\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const onComplete = (todoId) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const onActiveEditTodo = (todoId) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          toggle: false,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todosVisible.map(todo => (\n        todo.toggle\n          ? (\n            <li\n              className={todo.completed ? 'completed' : null}\n              key={todo.id}\n            >\n              <TodoItem\n                todo={todo}\n                onComplete={onComplete}\n                onActiveEditTodo={onActiveEditTodo}\n                onDelete={onDelete}\n              />\n            </li>\n          ) : (\n            <li className=\"editing\" key={todo.id}>\n              <TodoEdit\n                todos={todos}\n                todo={todo}\n                saveData={saveData}\n                setTodos={setTodos}\n              />\n            </li>\n          )\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todosVisible: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  saveData: PropTypes.func.isRequired,\n  setToogleAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","export const filters = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filters } from '../filters';\n\nconst TodosFilter = ({\n  onVisibleTodos,\n  visibleTodos,\n}) => (\n  <ul className=\"filters\">\n    {Object.values(filters).map(filter => (\n      <li key={filter}>\n        <a\n          href={filter === 'All' ? '#/' : `#/${filter.toLocaleLowerCase()}`}\n          className={visibleTodos === filter ? 'selected' : null}\n          onClick={() => {\n            onVisibleTodos(filter);\n          }}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  onVisibleTodos: PropTypes.func.isRequired,\n  visibleTodos: PropTypes.string.isRequired,\n};\n\nexport default TodosFilter;\n","import React, { useState, useEffect } from 'react';\nimport TodoApp from './components/TodoApp';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\nimport { filters } from './filters';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [title, setTitle] = useState('');\n  const [toogleAll, setToogleAll] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState(filters.all);\n\n  const count = todos.reduce(\n    (accum, todo) => accum - (todo.completed ? 1 : 0), todos.length,\n  );\n\n  const saveData = newTodos => (\n    localStorage.setItem('todos', JSON.stringify(newTodos))\n  );\n\n  useEffect(() => {\n    if (localStorage.getItem('todos')) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  const createTodo = (event) => {\n    event.preventDefault();\n    const id = +new Date();\n    const completed = false;\n    const toggle = true;\n\n    if (!title) {\n      return;\n    }\n\n    const newTodos = [{\n      id, title, completed, toggle,\n    }, ...todos];\n\n    setTodos(newTodos);\n    setTitle('');\n    saveData(newTodos);\n  };\n\n  const onToogleAll = () => {\n    if (!todos.length) {\n      setToogleAll(false);\n\n      return;\n    }\n\n    const newTodos = todos.map(todo => ({\n      ...todo,\n      completed: !toogleAll,\n    }));\n\n    setTodos(newTodos);\n    setToogleAll(!toogleAll);\n  };\n\n  const onClearCompleted = () => {\n    const newTodos = todos.filter(todo => !todo.completed);\n\n    if (!newTodos.length) {\n      setToogleAll(false);\n    }\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  let todosVisible = [];\n\n  if (visibleTodos === filters.all) {\n    todosVisible = todos;\n  } else if (visibleTodos === filters.active) {\n    todosVisible = todos.filter(todo => !todo.completed);\n  } else if (visibleTodos === filters.completed) {\n    todosVisible = todos.filter(todo => todo.completed);\n  }\n\n  const onVisibleTodos = (str) => {\n    setVisibleTodos(str);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp\n          onCreateTodo={createTodo}\n          title={title}\n          setTitle={setTitle}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toogleAll}\n          onChange={() => onToogleAll()}\n        />\n\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todosVisible={todosVisible}\n          setTodos={setTodos}\n          todos={todos}\n          saveData={saveData}\n          setToogleAll={setToogleAll}\n        />\n      </section>\n\n      {todos.length ? (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${count} items left`}\n          </span>\n\n          <TodosFilter\n            onVisibleTodos={onVisibleTodos}\n            visibleTodos={visibleTodos}\n          />\n\n          {todosVisible.some(todo => todo.completed)\n            ? (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => onClearCompleted()}\n              >\n                Clear completed\n              </button>\n            ) : null\n          }\n        </footer>\n      ) : null\n      }\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}