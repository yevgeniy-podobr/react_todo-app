{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","filters.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","onCreateTodo","title","setTitle","onSubmit","type","className","placeholder","value","onChange","event","target","TodoItem","todo","onComplete","onActiveEditTodo","onDelete","checked","completed","id","onDoubleClick","onClick","TodoList","todosVisible","todos","setTodos","saveData","useState","todosBeforeEdit","setTodosBeforeEdit","todoId","filter","newTodos","map","toggle","onEdit","onKeyDown","key","handleUpdatedDone","filters","all","active","TodosFilter","onVisibleTodos","Object","values","href","App","toogleAll","setToogleAll","visibleTodos","setVisibleTodos","count","reduce","accum","length","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","preventDefault","Date","onToogleAll","htmlFor","str","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d3390ab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoApp = ({\n  onCreateTodo,\n  title,\n  setTitle,\n}) => (\n  <form onSubmit={onCreateTodo}>\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={title}\n      onChange={event => setTitle(event.target.value)}\n    />\n  </form>\n);\n\nTodoApp.propTypes = {\n  onCreateTodo: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  setTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  todo,\n  onComplete,\n  onActiveEditTodo,\n  onDelete,\n}) => (\n  <div className=\"view\">\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      checked={todo.completed}\n      onChange={() => onComplete(todo.id)}\n    />\n    <label\n      onDoubleClick={() => onActiveEditTodo(todo.id)}\n    >\n      {todo.title}\n    </label>\n    <button\n      type=\"button\"\n      className=\"destroy\"\n      onClick={() => onDelete(todo.id)}\n    />\n  </div>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onActiveEditTodo: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  todosVisible,\n  todos,\n  setTodos,\n  saveData,\n}) => {\n  const [todosBeforeEdit, setTodosBeforeEdit] = useState([]);\n\n  const onDelete = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n    saveData(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const onComplete = (todoId) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const onEdit = (event, todoId) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: event.target.value,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const onActiveEditTodo = (todoId) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          toggle: false,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n    saveData(newTodos);\n  };\n\n  const handleUpdatedDone = (event, todoId) => {\n    if (event.key === 'Enter') {\n      const newTodos = todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            toggle: true,\n          };\n        }\n\n        return todo;\n      });\n\n      setTodos(newTodos);\n      saveData(newTodos);\n    } else if (event.key === 'Escape') {\n      const newTodos = todosBeforeEdit.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            toggle: true,\n          };\n        }\n\n        return todo;\n      });\n\n      setTodos(newTodos);\n      saveData(newTodos);\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todosVisible.map(todo => (\n        todo.toggle\n          ? (\n            <li\n              className={todo.completed ? 'completed' : null}\n              key={todo.id}\n            >\n              <TodoItem\n                todo={todo}\n                onComplete={onComplete}\n                onActiveEditTodo={onActiveEditTodo}\n                onDelete={onDelete}\n              />\n            </li>\n          ) : (\n            <li className=\"editing\" key={todo.id}>\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={todo.title}\n                onChange={(event) => {\n                  setTodosBeforeEdit(todosVisible);\n                  onEdit(event, todo.id);\n                }}\n                onKeyDown={event => (\n                  handleUpdatedDone(event, todo.id)\n                )}\n              />\n            </li>\n          )\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todosVisible: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  saveData: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","export const filters = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filters } from '../filters';\n\nconst TodosFilter = ({ onVisibleTodos }) => (\n  <ul className=\"filters\">\n    {Object.values(filters).map(filter => (\n      <li key={filter}>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          onClick={() => (\n            onVisibleTodos(filter)\n          )}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  onVisibleTodos: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React, { useState, useEffect } from 'react';\nimport TodoApp from './components/TodoApp';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\nimport { filters } from './filters';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [title, setTitle] = useState('');\n  const [toogleAll, setToogleAll] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState(filters.all);\n\n  const count = todos.reduce(\n    (accum, todo) => accum - (todo.completed ? 1 : 0), todos.length,\n  );\n\n  const saveData = newTodos => (\n    localStorage.setItem('todos', JSON.stringify(newTodos))\n  );\n\n  useEffect(() => {\n    if (localStorage.getItem('todos')) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  const createTodo = (event) => {\n    event.preventDefault();\n    const id = +new Date();\n    const completed = false;\n    const toggle = true;\n\n    if (!title) {\n      return;\n    }\n\n    const newTodos = [{\n      id, title, completed, toggle,\n    }, ...todos];\n\n    setTodos(newTodos);\n    setTitle('');\n    saveData(newTodos);\n  };\n\n  const onToogleAll = () => {\n    const newTodos = todos.map(todo => ({\n      ...todo,\n      completed: !toogleAll,\n    }));\n\n    setTodos(newTodos);\n    setToogleAll(!toogleAll);\n  };\n\n  let todosVisible = [];\n\n  if (visibleTodos === filters.all) {\n    todosVisible = todos;\n  } else if (visibleTodos === filters.active) {\n    todosVisible = todos.filter(todo => !todo.completed);\n  } else if (visibleTodos === filters.completed) {\n    todosVisible = todos.filter(todo => todo.completed);\n  }\n\n  const onVisibleTodos = (str) => {\n    setVisibleTodos(str);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp\n          onCreateTodo={createTodo}\n          title={title}\n          setTitle={setTitle}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toogleAll}\n          onChange={() => onToogleAll()}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todosVisible={todosVisible}\n          setTodos={setTodos}\n          todos={todos}\n          saveData={saveData}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${count} items left`}\n        </span>\n\n        <TodosFilter onVisibleTodos={onVisibleTodos} />\n\n        {todosVisible.some(todo => todo.completed)\n          ? (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                setTodos(todos.filter(todo => !todo.completed));\n                saveData(todos.filter(todo => !todo.completed));\n              }}\n            >\n              Clear completed\n            </button>\n          ) : null\n        }\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}